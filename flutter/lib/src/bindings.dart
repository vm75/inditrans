// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'ffi_proxy.dart' as ffi;

/// Bindings for `inditrans`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
/// Replace 'dart:ffi' with 'ffi_proxy.dart' in imports.
///
class InditransBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  InditransBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  InditransBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// transliterate
  ffi.Pointer<ffi.Uint8> transliterate(
    ffi.Pointer<ffi.Uint8> text,
    ffi.Pointer<ffi.Uint8> from,
    ffi.Pointer<ffi.Uint8> to,
    int options,
  ) {
    return _transliterate(
      text,
      from,
      to,
      options,
    );
  }

  late final _transliteratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.UnsignedLong)>>('transliterate');
  late final _transliterate = _transliteratePtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  /// releaseBuffer
  void releaseBuffer(
    ffi.Pointer<ffi.Uint8> buffer,
  ) {
    return _releaseBuffer(
      buffer,
    );
  }

  late final _releaseBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint8>)>>(
          'releaseBuffer');
  late final _releaseBuffer =
      _releaseBufferPtr.asFunction<void Function(ffi.Pointer<ffi.Uint8>)>();
}
